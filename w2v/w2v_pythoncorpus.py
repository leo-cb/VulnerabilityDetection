from pydriller import RepositoryMining
from joblib import Parallel, delayed
import pickle

file_bin_path = '../data/pythontraining.pkl'
file_txt_path = '../data/pythontraining.txt'

# Decorator to catch and print exceptions
def catchexception(func):
    def wrapper(repo_url):
        try:
            return func(repo_url)
        except Exception as e:
            print(f"Error processing {repo_url}: {str(e)}")
    return wrapper

# Function to collect code from a single repository
@catchexception
def collect_code_from_repo(repo_url):
    print(f"Cloning from {repo_url}...")
    
    python_training = ""
    files = set()
    
    for commit in RepositoryMining(repo_url).traverse_commits():
        try:
            for m in commit.modifications:
                try:
                    filename = m.new_path

                    if filename is not None and filename.endswith(".py"):
                        if filename not in files:
                            code = m.source_code
                            if code is not None:
                                python_training += "\n\n" + code
                                files.add(filename)
                except Exception as e:
                  print(f"{m} modification in {repo_url} passed: {str(e)}")  
        except Exception as e:
            print(f"commit in {repo_url} passed: {str(e)}")

    return python_training

# Read repository URLs from a file
with open('../input/repos.txt', 'r') as url_file:
    repos = [line.strip() for line in url_file]

# Number of parallel jobs (adjust as needed)
num_jobs = -1

# Use joblib to parallelize the collection of code
parallel_results = Parallel(n_jobs=num_jobs)(
    delayed(collect_code_from_repo)(repo_url) for repo_url in repos
)

results = [p for p in parallel_results if p != None]

# Save the results to a binary file
try:
    with open(file_bin_path, 'wb') as pickle_file:
        pickle.dump(results, pickle_file)
    print(f"File {file_bin_path} saved successfully.")
except FileNotFoundError as e:
    print(f"Error: {str(e)}. The file path is invalid.")
except PermissionError as e:
    print(f"Error: {str(e)}. You don't have permission to write to this file.")
except Exception as e:
    print(f"An unexpected error occurred: {str(e)}")

with open(r"C:\Users\leocb\O meu disco\Projects\VulnerabilityDetection\data\pythontraining.pkl", 'rb') as f:
    results = pickle.load(f)

# Combine the results from all repositories and write to txt file
python_training = "\n\n".join(results)

print(f"***********************\n{python_training}\n***********************")

file_txt_path = r"C:\Users\leocb\O meu disco\Projects\VulnerabilityDetection\data\pythontraining.txt"
try:
    with open(file_txt_path, 'w') as outfile:
        for line in python_training.splitlines():
            outfile.write(line + '\n')
    print(f"File {file_txt_path} saved successfully.")
except Exception as e:
    print(f"Error writing line to file: {str(e)}")

except FileNotFoundError as e:
    print(f"Error: {str(e)}. The file path is invalid.")
except PermissionError as e:
    print(f"Error: {str(e)}. You don't have permission to write to this file.")
except Exception as e:
    print(f"An unexpected error occurred: {str(e)}")

# # Save the collected code to a file
# with open(, 'w') as outfile:
#     outfile.write(python_training)